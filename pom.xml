<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.onap.oparent</groupId>
    <artifactId>oparent</artifactId>
    <version>1.1.0</version>
  </parent>
  <!-- parent>
           <groupId>org.onap.dcae.platform</groupId>
    <artifactId>plugins</artifactId>
    <version>1.0.0</version>
  </parent -->

  <!--- CHANGE THE FOLLOWING 3 OBJECTS for your own repo -->
  <groupId>org.onap.dcaegen2.collectors</groupId>
  <artifactId>snmptrap</artifactId>
  <name>dcae_snmptrap</name>
  
  <version>1.3.0-SNAPSHOT</version>
  <url>http://maven.apache.org</url>
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <sonar.sources>.</sonar.sources>
    <!-- customize the SONARQUBE URL -->
    <sonar.host.url>http://localhost:9000</sonar.host.url>
    <!-- below are language dependent -->
    <!-- for Python -->
    <sonar.language>py</sonar.language>
    <sonar.pluginName>Python</sonar.pluginName>
    <sonar.inclusions>**/*.py</sonar.inclusions>
  </properties>

  <build>
    <finalName>${project.artifactId}-${project.version}</finalName>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>sonar-maven-plugin</artifactId>
          <version>2.7.1</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
      <!-- plugin>
                   <artifactId>maven-assembly-plugin</artifactId>
        <version>2.4.1</version>
        <configuration>
          <descriptors>
            <descriptor>assembly/dep.xml</descriptor>
          </descriptors>
        </configuration>
        <executions>
          <execution>
            <id>make-assembly</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
          </execution>
        </executions>
      </plugin -->

      <!-- first disable the default Java plugins at various stages -->
      <!-- maven-resources-plugin is called during "*resource" phases by default behavior.  it prepares the resources
                  dir.  we do not need it -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <version>2.6</version>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>

      <!-- maven-compiler-plugin is called during "compile" phases by default behavior.  we do not need it -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.1</version>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>

      <!-- maven-jar-plugin is called during "compile" phase by default behavior.  we do not need it -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>2.4</version>
        <executions>
          <execution>
            <id>default-jar</id>
            <phase/>
          </execution>
        </executions>
      </plugin>

      <!-- maven-install-plugin is called during "install" phase by default behavior.  it tries to copy stuff under 
                  target dir to ~/.m2.  we do not need it -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-install-plugin</artifactId>
        <version>2.4</version>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>

      <!-- maven-surefire-plugin is called during "test" phase by default behavior.  it triggers junit test.
                  we do not need it -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.12.4</version>
        <configuration>
          <skipTests>true</skipTests>
        </configuration>
      </plugin>


      <!-- now we configure custom action (calling a script) at various lifecycle phases -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>1.2.1</version>
        <executions>
          <execution>
            <id>clean phase script</id>
            <phase>clean</phase>
            <goals><goal>exec</goal></goals>
            <configuration>
              <executable>${session.executionRootDirectory}/mvn-phase-script.sh</executable>
              <arguments>
                <argument>${project.artifactId}</argument>
                <argument>clean</argument>
              </arguments>
              <environmentVariables>
                <!-- make mvn properties as env for our script -->
                <MVN_PROJECT_GROUPID>${project.groupId}</MVN_PROJECT_GROUPID> 
                <MVN_PROJECT_ARTIFACTID>${project.artifactId}</MVN_PROJECT_ARTIFACTID> 
                <MVN_PROJECT_VERSION>${project.version}</MVN_PROJECT_VERSION> 
                <MVN_NEXUSPROXY>${onap.nexus.url}</MVN_NEXUSPROXY> 
                <!--MVN_DOCKERREG_URL>${docker.push.registry}</MVN_DOCKERREG_URL--> 
              </environmentVariables> 
            </configuration>
          </execution>

          <execution>
            <id>generate-sources script</id>
            <phase>generate-sources</phase>
            <goals><goal>exec</goal></goals>
            <configuration>
              <executable>mvn-phase-script.sh</executable>
              <arguments>
                <argument>${project.artifactId}</argument>
                <argument>generate-sources</argument>
              </arguments>
              <environmentVariables>
                <!-- make mvn properties as env for our script -->
                <MVN_PROJECT_GROUPID>${project.groupId}</MVN_PROJECT_GROUPID> 
                <MVN_PROJECT_ARTIFACTID>${project.artifactId}</MVN_PROJECT_ARTIFACTID> 
                <MVN_PROJECT_VERSION>${project.version}</MVN_PROJECT_VERSION> 
                <MVN_NEXUSPROXY>${onap.nexus.url}</MVN_NEXUSPROXY> 
                <!--MVN_DOCKERREG_URL>${docker.push.registry}</MVN_DOCKERREG_URL--> 
              </environmentVariables> 
            </configuration>
          </execution>

          <execution>
            <id>compile script</id>
            <phase>compile</phase>
            <goals><goal>exec</goal></goals>
            <configuration>
              <executable>mvn-phase-script.sh</executable>
              <arguments>
                <argument>${project.artifactId}</argument>
                <argument>compile</argument>
              </arguments>
              <environmentVariables>
                <!-- make mvn properties as env for our script -->
                <MVN_PROJECT_GROUPID>${project.groupId}</MVN_PROJECT_GROUPID> 
                <MVN_PROJECT_ARTIFACTID>${project.artifactId}</MVN_PROJECT_ARTIFACTID> 
                <MVN_PROJECT_VERSION>${project.version}</MVN_PROJECT_VERSION> 
                <MVN_NEXUSPROXY>${onap.nexus.url}</MVN_NEXUSPROXY> 
                <!--MVN_DOCKERREG_URL>${docker.push.registry}</MVN_DOCKERREG_URL--> 
              </environmentVariables> 
            </configuration>
          </execution>

          <execution>
            <id>package script</id>
            <phase>package</phase>
            <goals><goal>exec</goal></goals>
            <configuration>
              <executable>mvn-phase-script.sh</executable>
              <arguments>
                <argument>${project.artifactId}</argument>
                <argument>package</argument>
              </arguments>
              <environmentVariables>
                <!-- make mvn properties as env for our script -->
                <MVN_PROJECT_GROUPID>${project.groupId}</MVN_PROJECT_GROUPID> 
                <MVN_PROJECT_ARTIFACTID>${project.artifactId}</MVN_PROJECT_ARTIFACTID> 
                <MVN_PROJECT_VERSION>${project.version}</MVN_PROJECT_VERSION> 
                <MVN_NEXUSPROXY>${onap.nexus.url}</MVN_NEXUSPROXY> 
                <!--MVN_DOCKERREG_URL>${docker.push.registry}</MVN_DOCKERREG_URL--> 
              </environmentVariables> 
            </configuration>
          </execution>

          <execution>
            <id>test script</id>
            <phase>test</phase>
            <goals><goal>exec</goal></goals>
            <configuration>
              <executable>mvn-phase-script.sh</executable>
              <arguments>
                <argument>${project.artifactId}</argument>
                <argument>test</argument>
              </arguments>
              <environmentVariables>
                <!-- make mvn properties as env for our script -->
                <MVN_PROJECT_GROUPID>${project.groupId}</MVN_PROJECT_GROUPID> 
                <MVN_PROJECT_ARTIFACTID>${project.artifactId}</MVN_PROJECT_ARTIFACTID> 
                <MVN_PROJECT_VERSION>${project.version}</MVN_PROJECT_VERSION> 
                <MVN_NEXUSPROXY>${onap.nexus.url}</MVN_NEXUSPROXY> 
                <!--MVN_DOCKERREG_URL>${docker.push.registry}</MVN_DOCKERREG_URL--> 
              </environmentVariables> 
            </configuration>
          </execution>

          <execution>
            <id>install script</id>
            <phase>install</phase>
            <goals><goal>exec</goal></goals>
            <configuration>
              <executable>mvn-phase-script.sh</executable>
              <arguments>
                <argument>${project.artifactId}</argument>
                <argument>install</argument>
              </arguments>
              <environmentVariables>
                <!-- make mvn properties as env for our script -->
                <MVN_PROJECT_GROUPID>${project.groupId}</MVN_PROJECT_GROUPID> 
                <MVN_PROJECT_ARTIFACTID>${project.artifactId}</MVN_PROJECT_ARTIFACTID> 
                <MVN_PROJECT_VERSION>${project.version}</MVN_PROJECT_VERSION> 
                <MVN_NEXUSPROXY>${onap.nexus.url}</MVN_NEXUSPROXY> 
                <!--MVN_DOCKERREG_URL>${docker.push.registry}</MVN_DOCKERREG_URL--> 
              </environmentVariables> 
            </configuration>
          </execution>

          <execution>
            <id>deploy script</id>
            <phase>deploy</phase>
            <goals><goal>exec</goal></goals>
            <configuration>
              <executable>mvn-phase-script.sh</executable>
              <arguments>
                <argument>${project.artifactId}</argument>
                <argument>deploy</argument>
              </arguments>
              <environmentVariables>
                <!-- make mvn properties as env for our script -->
                <MVN_PROJECT_GROUPID>${project.groupId}</MVN_PROJECT_GROUPID> 
                <MVN_PROJECT_ARTIFACTID>${project.artifactId}</MVN_PROJECT_ARTIFACTID> 
                <MVN_PROJECT_VERSION>${project.version}</MVN_PROJECT_VERSION> 
                <MVN_NEXUSPROXY>${onap.nexus.url}</MVN_NEXUSPROXY> 
                <!--MVN_DOCKERREG_URL>${docker.push.registry}</MVN_DOCKERREG_URL--> 
              </environmentVariables> 
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
